//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/InputSystem/PlayerMovementNew.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovementNew: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovementNew()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovementNew"",
    ""maps"": [
        {
            ""name"": ""PlayerActionsInput"",
            ""id"": ""06984c4a-35bc-4c90-87d0-2a467a274041"",
            ""actions"": [
                {
                    ""name"": ""DebugMessage"",
                    ""type"": ""Button"",
                    ""id"": ""de4cbebf-9ef3-4cd4-8a45-d417f62d627a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovingHorisontal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""abb2a030-89c6-4785-8a54-ff59d38b7b3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bab2045f-a5d9-44ac-a0aa-a4d4575102d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickObject"",
                    ""type"": ""PassThrough"",
                    ""id"": ""883568b5-7a87-45cc-9fff-b5b631cb7545"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldObject"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7ffe8bf3-64c1-4f6f-9276-1e53145dd9ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToLobby"",
                    ""type"": ""Button"",
                    ""id"": ""764b9a33-6005-44dc-bebc-5dde34baa0d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeleteProgress"",
                    ""type"": ""Button"",
                    ""id"": ""8f50ea2a-c45c-494b-89dc-445d6da0d696"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeverActivate"",
                    ""type"": ""Button"",
                    ""id"": ""9dc08f62-2ca0-4e33-8375-1c1091abfa36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a559dd7-06fe-4fa8-b190-bb02bf1b113a"",
                    ""path"": ""<Keyboard>/f8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugMessage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19ffbc8e-bb71-4ad2-b6cd-f384df7af230"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80ee1834-8d74-45ed-8e43-9a979c8c96e9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""MovingHorisontal"",
                    ""id"": ""ade2ed2c-9480-47e2-bcf5-a4ffc3b1a769"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""74c6b793-578f-4ed4-a11d-4ae292c85453"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a3431e6b-e92b-42b5-8b4a-180d2a82122a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5b53c93d-41d9-457e-a82b-f6a767022150"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9b2f3b55-7ace-44bb-a61c-abacbb7865a7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""21b02f9c-4517-47a3-a384-4846c77c9bfb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f5008667-0332-4642-9060-8594af0da9c1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9dea9714-109b-4e1f-b645-03825ba5dbcc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7c77ca38-044f-4c3f-b35a-225e84b3b282"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c39e813-b650-4d13-bc98-ef545291d25e"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorisontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cf9c5a7c-d65b-4e96-84db-5b1ad8230f4f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f5cb461-d88e-4ea1-9829-6b8351eec1cc"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e077cb13-f23f-493b-b8af-110507868004"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToLobby"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31e81e2c-647a-47be-bb5f-da1490ac5582"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeleteProgress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f802a623-71fc-404a-8611-7b254ffd118e"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeverActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ABOBA"",
            ""id"": ""893f74a7-6bf2-4519-a780-b9aa3314876c"",
            ""actions"": [
                {
                    ""name"": ""Lever"",
                    ""type"": ""Value"",
                    ""id"": ""a6ff62c0-a36d-40f9-b174-60c41e4c1364"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""045fd78b-61e6-4d6e-8783-96b0e8eb5f20"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lever"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f557820c-c485-47c2-810c-c13d1481a59d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lever"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActionsInput
        m_PlayerActionsInput = asset.FindActionMap("PlayerActionsInput", throwIfNotFound: true);
        m_PlayerActionsInput_DebugMessage = m_PlayerActionsInput.FindAction("DebugMessage", throwIfNotFound: true);
        m_PlayerActionsInput_MovingHorisontal = m_PlayerActionsInput.FindAction("MovingHorisontal", throwIfNotFound: true);
        m_PlayerActionsInput_Jump = m_PlayerActionsInput.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActionsInput_PickObject = m_PlayerActionsInput.FindAction("PickObject", throwIfNotFound: true);
        m_PlayerActionsInput_HoldObject = m_PlayerActionsInput.FindAction("HoldObject", throwIfNotFound: true);
        m_PlayerActionsInput_ToLobby = m_PlayerActionsInput.FindAction("ToLobby", throwIfNotFound: true);
        m_PlayerActionsInput_DeleteProgress = m_PlayerActionsInput.FindAction("DeleteProgress", throwIfNotFound: true);
        m_PlayerActionsInput_LeverActivate = m_PlayerActionsInput.FindAction("LeverActivate", throwIfNotFound: true);
        // ABOBA
        m_ABOBA = asset.FindActionMap("ABOBA", throwIfNotFound: true);
        m_ABOBA_Lever = m_ABOBA.FindAction("Lever", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActionsInput
    private readonly InputActionMap m_PlayerActionsInput;
    private List<IPlayerActionsInputActions> m_PlayerActionsInputActionsCallbackInterfaces = new List<IPlayerActionsInputActions>();
    private readonly InputAction m_PlayerActionsInput_DebugMessage;
    private readonly InputAction m_PlayerActionsInput_MovingHorisontal;
    private readonly InputAction m_PlayerActionsInput_Jump;
    private readonly InputAction m_PlayerActionsInput_PickObject;
    private readonly InputAction m_PlayerActionsInput_HoldObject;
    private readonly InputAction m_PlayerActionsInput_ToLobby;
    private readonly InputAction m_PlayerActionsInput_DeleteProgress;
    private readonly InputAction m_PlayerActionsInput_LeverActivate;
    public struct PlayerActionsInputActions
    {
        private @PlayerMovementNew m_Wrapper;
        public PlayerActionsInputActions(@PlayerMovementNew wrapper) { m_Wrapper = wrapper; }
        public InputAction @DebugMessage => m_Wrapper.m_PlayerActionsInput_DebugMessage;
        public InputAction @MovingHorisontal => m_Wrapper.m_PlayerActionsInput_MovingHorisontal;
        public InputAction @Jump => m_Wrapper.m_PlayerActionsInput_Jump;
        public InputAction @PickObject => m_Wrapper.m_PlayerActionsInput_PickObject;
        public InputAction @HoldObject => m_Wrapper.m_PlayerActionsInput_HoldObject;
        public InputAction @ToLobby => m_Wrapper.m_PlayerActionsInput_ToLobby;
        public InputAction @DeleteProgress => m_Wrapper.m_PlayerActionsInput_DeleteProgress;
        public InputAction @LeverActivate => m_Wrapper.m_PlayerActionsInput_LeverActivate;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionsInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsInputActionsCallbackInterfaces.Add(instance);
            @DebugMessage.started += instance.OnDebugMessage;
            @DebugMessage.performed += instance.OnDebugMessage;
            @DebugMessage.canceled += instance.OnDebugMessage;
            @MovingHorisontal.started += instance.OnMovingHorisontal;
            @MovingHorisontal.performed += instance.OnMovingHorisontal;
            @MovingHorisontal.canceled += instance.OnMovingHorisontal;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @PickObject.started += instance.OnPickObject;
            @PickObject.performed += instance.OnPickObject;
            @PickObject.canceled += instance.OnPickObject;
            @HoldObject.started += instance.OnHoldObject;
            @HoldObject.performed += instance.OnHoldObject;
            @HoldObject.canceled += instance.OnHoldObject;
            @ToLobby.started += instance.OnToLobby;
            @ToLobby.performed += instance.OnToLobby;
            @ToLobby.canceled += instance.OnToLobby;
            @DeleteProgress.started += instance.OnDeleteProgress;
            @DeleteProgress.performed += instance.OnDeleteProgress;
            @DeleteProgress.canceled += instance.OnDeleteProgress;
            @LeverActivate.started += instance.OnLeverActivate;
            @LeverActivate.performed += instance.OnLeverActivate;
            @LeverActivate.canceled += instance.OnLeverActivate;
        }

        private void UnregisterCallbacks(IPlayerActionsInputActions instance)
        {
            @DebugMessage.started -= instance.OnDebugMessage;
            @DebugMessage.performed -= instance.OnDebugMessage;
            @DebugMessage.canceled -= instance.OnDebugMessage;
            @MovingHorisontal.started -= instance.OnMovingHorisontal;
            @MovingHorisontal.performed -= instance.OnMovingHorisontal;
            @MovingHorisontal.canceled -= instance.OnMovingHorisontal;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @PickObject.started -= instance.OnPickObject;
            @PickObject.performed -= instance.OnPickObject;
            @PickObject.canceled -= instance.OnPickObject;
            @HoldObject.started -= instance.OnHoldObject;
            @HoldObject.performed -= instance.OnHoldObject;
            @HoldObject.canceled -= instance.OnHoldObject;
            @ToLobby.started -= instance.OnToLobby;
            @ToLobby.performed -= instance.OnToLobby;
            @ToLobby.canceled -= instance.OnToLobby;
            @DeleteProgress.started -= instance.OnDeleteProgress;
            @DeleteProgress.performed -= instance.OnDeleteProgress;
            @DeleteProgress.canceled -= instance.OnDeleteProgress;
            @LeverActivate.started -= instance.OnLeverActivate;
            @LeverActivate.performed -= instance.OnLeverActivate;
            @LeverActivate.canceled -= instance.OnLeverActivate;
        }

        public void RemoveCallbacks(IPlayerActionsInputActions instance)
        {
            if (m_Wrapper.m_PlayerActionsInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsInputActions @PlayerActionsInput => new PlayerActionsInputActions(this);

    // ABOBA
    private readonly InputActionMap m_ABOBA;
    private List<IABOBAActions> m_ABOBAActionsCallbackInterfaces = new List<IABOBAActions>();
    private readonly InputAction m_ABOBA_Lever;
    public struct ABOBAActions
    {
        private @PlayerMovementNew m_Wrapper;
        public ABOBAActions(@PlayerMovementNew wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lever => m_Wrapper.m_ABOBA_Lever;
        public InputActionMap Get() { return m_Wrapper.m_ABOBA; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ABOBAActions set) { return set.Get(); }
        public void AddCallbacks(IABOBAActions instance)
        {
            if (instance == null || m_Wrapper.m_ABOBAActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ABOBAActionsCallbackInterfaces.Add(instance);
            @Lever.started += instance.OnLever;
            @Lever.performed += instance.OnLever;
            @Lever.canceled += instance.OnLever;
        }

        private void UnregisterCallbacks(IABOBAActions instance)
        {
            @Lever.started -= instance.OnLever;
            @Lever.performed -= instance.OnLever;
            @Lever.canceled -= instance.OnLever;
        }

        public void RemoveCallbacks(IABOBAActions instance)
        {
            if (m_Wrapper.m_ABOBAActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IABOBAActions instance)
        {
            foreach (var item in m_Wrapper.m_ABOBAActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ABOBAActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ABOBAActions @ABOBA => new ABOBAActions(this);
    public interface IPlayerActionsInputActions
    {
        void OnDebugMessage(InputAction.CallbackContext context);
        void OnMovingHorisontal(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPickObject(InputAction.CallbackContext context);
        void OnHoldObject(InputAction.CallbackContext context);
        void OnToLobby(InputAction.CallbackContext context);
        void OnDeleteProgress(InputAction.CallbackContext context);
        void OnLeverActivate(InputAction.CallbackContext context);
    }
    public interface IABOBAActions
    {
        void OnLever(InputAction.CallbackContext context);
    }
}
